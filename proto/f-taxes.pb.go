// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: f-taxes.proto

package proto

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxAction int32

const (
	TxAction_BUY  TxAction = 0
	TxAction_SELL TxAction = 1
)

// Enum value maps for TxAction.
var (
	TxAction_name = map[int32]string{
		0: "BUY",
		1: "SELL",
	}
	TxAction_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
	}
)

func (x TxAction) Enum() *TxAction {
	p := new(TxAction)
	*p = x
	return p
}

func (x TxAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxAction) Descriptor() protoreflect.EnumDescriptor {
	return file_f_taxes_proto_enumTypes[0].Descriptor()
}

func (TxAction) Type() protoreflect.EnumType {
	return &file_f_taxes_proto_enumTypes[0]
}

func (x TxAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxAction.Descriptor instead.
func (TxAction) EnumDescriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{0}
}

type TransferAction int32

const (
	TransferAction_DEPOSIT    TransferAction = 0
	TransferAction_WITHDRAWAL TransferAction = 1
)

// Enum value maps for TransferAction.
var (
	TransferAction_name = map[int32]string{
		0: "DEPOSIT",
		1: "WITHDRAWAL",
	}
	TransferAction_value = map[string]int32{
		"DEPOSIT":    0,
		"WITHDRAWAL": 1,
	}
)

func (x TransferAction) Enum() *TransferAction {
	p := new(TransferAction)
	*p = x
	return p
}

func (x TransferAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferAction) Descriptor() protoreflect.EnumDescriptor {
	return file_f_taxes_proto_enumTypes[1].Descriptor()
}

func (TransferAction) Type() protoreflect.EnumType {
	return &file_f_taxes_proto_enumTypes[1]
}

func (x TransferAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferAction.Descriptor instead.
func (TransferAction) EnumDescriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{1}
}

type OrderType int32

const (
	OrderType_TAKER OrderType = 0
	OrderType_MAKER OrderType = 1
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "TAKER",
		1: "MAKER",
	}
	OrderType_value = map[string]int32{
		"TAKER": 0,
		"MAKER": 1,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_f_taxes_proto_enumTypes[2].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_f_taxes_proto_enumTypes[2]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{2}
}

type LogLevel int32

const (
	LogLevel_INFO LogLevel = 0
	LogLevel_WARN LogLevel = 1
	LogLevel_ERR  LogLevel = 2
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "INFO",
		1: "WARN",
		2: "ERR",
	}
	LogLevel_value = map[string]int32{
		"INFO": 0,
		"WARN": 1,
		"ERR":  2,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_f_taxes_proto_enumTypes[3].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_f_taxes_proto_enumTypes[3]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{3}
}

type TradeProps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMarginTrade bool `protobuf:"varint,1,opt,name=IsMarginTrade,proto3" json:"IsMarginTrade,omitempty"`
	IsDerivative  bool `protobuf:"varint,2,opt,name=IsDerivative,proto3" json:"IsDerivative,omitempty"`
	IsPhysical    bool `protobuf:"varint,3,opt,name=IsPhysical,proto3" json:"IsPhysical,omitempty"`
}

func (x *TradeProps) Reset() {
	*x = TradeProps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeProps) ProtoMessage() {}

func (x *TradeProps) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeProps.ProtoReflect.Descriptor instead.
func (*TradeProps) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{0}
}

func (x *TradeProps) GetIsMarginTrade() bool {
	if x != nil {
		return x.IsMarginTrade
	}
	return false
}

func (x *TradeProps) GetIsDerivative() bool {
	if x != nil {
		return x.IsDerivative
	}
	return false
}

func (x *TradeProps) GetIsPhysical() bool {
	if x != nil {
		return x.IsPhysical
	}
	return false
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID                  string                 `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	Ts                    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Ts,proto3" json:"Ts,omitempty"`
	Account               string                 `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Comment               string                 `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Ticker                string                 `protobuf:"bytes,1000,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
	Quote                 string                 `protobuf:"bytes,1001,opt,name=Quote,proto3" json:"Quote,omitempty"`
	Asset                 string                 `protobuf:"bytes,1002,opt,name=Asset,proto3" json:"Asset,omitempty"`
	Price                 string                 `protobuf:"bytes,2000,opt,name=Price,proto3" json:"Price,omitempty"`
	PriceC                string                 `protobuf:"bytes,2001,opt,name=PriceC,proto3" json:"PriceC,omitempty"`
	QuotePriceC           string                 `protobuf:"bytes,2002,opt,name=QuotePriceC,proto3" json:"QuotePriceC,omitempty"`
	PriceConvertedBy      string                 `protobuf:"bytes,2003,opt,name=PriceConvertedBy,proto3" json:"PriceConvertedBy,omitempty"`
	QuotePriceConvertedBy string                 `protobuf:"bytes,2004,opt,name=QuotePriceConvertedBy,proto3" json:"QuotePriceConvertedBy,omitempty"`
	Amount                string                 `protobuf:"bytes,2005,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Value                 string                 `protobuf:"bytes,2006,opt,name=Value,proto3" json:"Value,omitempty"`
	ValueC                string                 `protobuf:"bytes,2007,opt,name=ValueC,proto3" json:"ValueC,omitempty"`
	Action                TxAction               `protobuf:"varint,2008,opt,name=Action,proto3,enum=FTaxesGrpc.TxAction" json:"Action,omitempty"`
	OrderType             OrderType              `protobuf:"varint,2009,opt,name=OrderType,proto3,enum=FTaxesGrpc.OrderType" json:"OrderType,omitempty"`
	OrderID               string                 `protobuf:"bytes,2010,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Fee                   string                 `protobuf:"bytes,3000,opt,name=Fee,proto3" json:"Fee,omitempty"`
	FeeC                  string                 `protobuf:"bytes,3001,opt,name=FeeC,proto3" json:"FeeC,omitempty"`
	FeeConvertedBy        string                 `protobuf:"bytes,3002,opt,name=FeeConvertedBy,proto3" json:"FeeConvertedBy,omitempty"`
	FeeCurrency           string                 `protobuf:"bytes,3003,opt,name=FeeCurrency,proto3" json:"FeeCurrency,omitempty"`
	FeePriceC             string                 `protobuf:"bytes,3004,opt,name=FeePriceC,proto3" json:"FeePriceC,omitempty"`
	QuoteFee              string                 `protobuf:"bytes,3100,opt,name=QuoteFee,proto3" json:"QuoteFee,omitempty"`
	QuoteFeeC             string                 `protobuf:"bytes,3101,opt,name=QuoteFeeC,proto3" json:"QuoteFeeC,omitempty"`
	QuoteFeeConvertedBy   string                 `protobuf:"bytes,3102,opt,name=QuoteFeeConvertedBy,proto3" json:"QuoteFeeConvertedBy,omitempty"`
	QuoteFeeCurrency      string                 `protobuf:"bytes,3103,opt,name=QuoteFeeCurrency,proto3" json:"QuoteFeeCurrency,omitempty"`
	QuoteFeePriceC        string                 `protobuf:"bytes,3104,opt,name=QuoteFeePriceC,proto3" json:"QuoteFeePriceC,omitempty"`
	AssetDecimals         int32                  `protobuf:"varint,3200,opt,name=AssetDecimals,proto3" json:"AssetDecimals,omitempty"`
	QuoteDecimals         int32                  `protobuf:"varint,3201,opt,name=QuoteDecimals,proto3" json:"QuoteDecimals,omitempty"`
	FeeDecimals           int32                  `protobuf:"varint,3202,opt,name=FeeDecimals,proto3" json:"FeeDecimals,omitempty"`
	QuoteFeeDecimals      int32                  `protobuf:"varint,3203,opt,name=QuoteFeeDecimals,proto3" json:"QuoteFeeDecimals,omitempty"`
	Props                 *TradeProps            `protobuf:"bytes,4000,opt,name=Props,proto3" json:"Props,omitempty"`
	Plugin                string                 `protobuf:"bytes,9000,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	PluginVersion         string                 `protobuf:"bytes,9001,opt,name=PluginVersion,proto3" json:"PluginVersion,omitempty"`
	Created               *timestamppb.Timestamp `protobuf:"bytes,9002,opt,name=Created,proto3" json:"Created,omitempty"`
	Updated               *timestamppb.Timestamp `protobuf:"bytes,9003,opt,name=Updated,proto3" json:"Updated,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{1}
}

func (x *Trade) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *Trade) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Trade) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Trade) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Trade) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Trade) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *Trade) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Trade) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Trade) GetPriceC() string {
	if x != nil {
		return x.PriceC
	}
	return ""
}

func (x *Trade) GetQuotePriceC() string {
	if x != nil {
		return x.QuotePriceC
	}
	return ""
}

func (x *Trade) GetPriceConvertedBy() string {
	if x != nil {
		return x.PriceConvertedBy
	}
	return ""
}

func (x *Trade) GetQuotePriceConvertedBy() string {
	if x != nil {
		return x.QuotePriceConvertedBy
	}
	return ""
}

func (x *Trade) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Trade) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Trade) GetValueC() string {
	if x != nil {
		return x.ValueC
	}
	return ""
}

func (x *Trade) GetAction() TxAction {
	if x != nil {
		return x.Action
	}
	return TxAction_BUY
}

func (x *Trade) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_TAKER
}

func (x *Trade) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *Trade) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *Trade) GetFeeC() string {
	if x != nil {
		return x.FeeC
	}
	return ""
}

func (x *Trade) GetFeeConvertedBy() string {
	if x != nil {
		return x.FeeConvertedBy
	}
	return ""
}

func (x *Trade) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

func (x *Trade) GetFeePriceC() string {
	if x != nil {
		return x.FeePriceC
	}
	return ""
}

func (x *Trade) GetQuoteFee() string {
	if x != nil {
		return x.QuoteFee
	}
	return ""
}

func (x *Trade) GetQuoteFeeC() string {
	if x != nil {
		return x.QuoteFeeC
	}
	return ""
}

func (x *Trade) GetQuoteFeeConvertedBy() string {
	if x != nil {
		return x.QuoteFeeConvertedBy
	}
	return ""
}

func (x *Trade) GetQuoteFeeCurrency() string {
	if x != nil {
		return x.QuoteFeeCurrency
	}
	return ""
}

func (x *Trade) GetQuoteFeePriceC() string {
	if x != nil {
		return x.QuoteFeePriceC
	}
	return ""
}

func (x *Trade) GetAssetDecimals() int32 {
	if x != nil {
		return x.AssetDecimals
	}
	return 0
}

func (x *Trade) GetQuoteDecimals() int32 {
	if x != nil {
		return x.QuoteDecimals
	}
	return 0
}

func (x *Trade) GetFeeDecimals() int32 {
	if x != nil {
		return x.FeeDecimals
	}
	return 0
}

func (x *Trade) GetQuoteFeeDecimals() int32 {
	if x != nil {
		return x.QuoteFeeDecimals
	}
	return 0
}

func (x *Trade) GetProps() *TradeProps {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Trade) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *Trade) GetPluginVersion() string {
	if x != nil {
		return x.PluginVersion
	}
	return ""
}

func (x *Trade) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Trade) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID           string                 `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	Ts             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Ts,proto3" json:"Ts,omitempty"`
	Account        string                 `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Source         string                 `protobuf:"bytes,4,opt,name=Source,proto3" json:"Source,omitempty"`
	Destination    string                 `protobuf:"bytes,5,opt,name=Destination,proto3" json:"Destination,omitempty"`
	Comment        string                 `protobuf:"bytes,6,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Asset          string                 `protobuf:"bytes,1000,opt,name=Asset,proto3" json:"Asset,omitempty"`
	Amount         string                 `protobuf:"bytes,2001,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Action         TransferAction         `protobuf:"varint,2000,opt,name=Action,proto3,enum=FTaxesGrpc.TransferAction" json:"Action,omitempty"`
	Fee            string                 `protobuf:"bytes,3000,opt,name=Fee,proto3" json:"Fee,omitempty"`
	FeeC           string                 `protobuf:"bytes,3001,opt,name=FeeC,proto3" json:"FeeC,omitempty"`
	FeeConvertedBy string                 `protobuf:"bytes,3002,opt,name=FeeConvertedBy,proto3" json:"FeeConvertedBy,omitempty"`
	FeeCurrency    string                 `protobuf:"bytes,3003,opt,name=FeeCurrency,proto3" json:"FeeCurrency,omitempty"`
	FeePriceC      string                 `protobuf:"bytes,3004,opt,name=FeePriceC,proto3" json:"FeePriceC,omitempty"`
	AssetDecimals  int32                  `protobuf:"varint,4001,opt,name=AssetDecimals,proto3" json:"AssetDecimals,omitempty"`
	FeeDecimals    int32                  `protobuf:"varint,4002,opt,name=FeeDecimals,proto3" json:"FeeDecimals,omitempty"`
	Plugin         string                 `protobuf:"bytes,9000,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	PluginVersion  string                 `protobuf:"bytes,9001,opt,name=PluginVersion,proto3" json:"PluginVersion,omitempty"`
	Created        *timestamppb.Timestamp `protobuf:"bytes,9002,opt,name=Created,proto3" json:"Created,omitempty"`
	Updated        *timestamppb.Timestamp `protobuf:"bytes,9003,opt,name=Updated,proto3" json:"Updated,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{2}
}

func (x *Transfer) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *Transfer) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Transfer) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Transfer) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Transfer) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Transfer) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Transfer) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetAction() TransferAction {
	if x != nil {
		return x.Action
	}
	return TransferAction_DEPOSIT
}

func (x *Transfer) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *Transfer) GetFeeC() string {
	if x != nil {
		return x.FeeC
	}
	return ""
}

func (x *Transfer) GetFeeConvertedBy() string {
	if x != nil {
		return x.FeeConvertedBy
	}
	return ""
}

func (x *Transfer) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

func (x *Transfer) GetFeePriceC() string {
	if x != nil {
		return x.FeePriceC
	}
	return ""
}

func (x *Transfer) GetAssetDecimals() int32 {
	if x != nil {
		return x.AssetDecimals
	}
	return 0
}

func (x *Transfer) GetFeeDecimals() int32 {
	if x != nil {
		return x.FeeDecimals
	}
	return 0
}

func (x *Transfer) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *Transfer) GetPluginVersion() string {
	if x != nil {
		return x.PluginVersion
	}
	return ""
}

func (x *Transfer) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Transfer) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type SrcGenericFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID          string                 `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	Ts            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Ts,proto3" json:"Ts,omitempty"`
	Account       string                 `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Comment       string                 `protobuf:"bytes,4,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Fee           string                 `protobuf:"bytes,3000,opt,name=Fee,proto3" json:"Fee,omitempty"`
	FeeCurrency   string                 `protobuf:"bytes,3001,opt,name=FeeCurrency,proto3" json:"FeeCurrency,omitempty"`
	Plugin        string                 `protobuf:"bytes,9000,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	PluginVersion string                 `protobuf:"bytes,9001,opt,name=PluginVersion,proto3" json:"PluginVersion,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,9002,opt,name=Created,proto3" json:"Created,omitempty"`
	Updated       *timestamppb.Timestamp `protobuf:"bytes,9003,opt,name=Updated,proto3" json:"Updated,omitempty"`
}

func (x *SrcGenericFee) Reset() {
	*x = SrcGenericFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrcGenericFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrcGenericFee) ProtoMessage() {}

func (x *SrcGenericFee) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrcGenericFee.ProtoReflect.Descriptor instead.
func (*SrcGenericFee) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{3}
}

func (x *SrcGenericFee) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *SrcGenericFee) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *SrcGenericFee) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SrcGenericFee) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SrcGenericFee) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *SrcGenericFee) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

func (x *SrcGenericFee) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *SrcGenericFee) GetPluginVersion() string {
	if x != nil {
		return x.PluginVersion
	}
	return ""
}

func (x *SrcGenericFee) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *SrcGenericFee) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type JobProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Label    string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	Progress string `protobuf:"bytes,3,opt,name=Progress,proto3" json:"Progress,omitempty"`
	Plugin   string `protobuf:"bytes,4,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
}

func (x *JobProgress) Reset() {
	*x = JobProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobProgress) ProtoMessage() {}

func (x *JobProgress) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobProgress.ProtoReflect.Descriptor instead.
func (*JobProgress) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{4}
}

func (x *JobProgress) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *JobProgress) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *JobProgress) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *JobProgress) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trade    *Trade    `protobuf:"bytes,1,opt,name=Trade,proto3" json:"Trade,omitempty"`
	Transfer *Transfer `protobuf:"bytes,2,opt,name=Transfer,proto3" json:"Transfer,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{5}
}

func (x *Record) GetTrade() *Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

func (x *Record) GetTransfer() *Transfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

type StreamRecordsJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Plugin        string                 `protobuf:"bytes,90,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	PluginVersion string                 `protobuf:"bytes,91,opt,name=PluginVersion,proto3" json:"PluginVersion,omitempty"`
}

func (x *StreamRecordsJob) Reset() {
	*x = StreamRecordsJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRecordsJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRecordsJob) ProtoMessage() {}

func (x *StreamRecordsJob) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRecordsJob.ProtoReflect.Descriptor instead.
func (*StreamRecordsJob) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{6}
}

func (x *StreamRecordsJob) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *StreamRecordsJob) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *StreamRecordsJob) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *StreamRecordsJob) GetPluginVersion() string {
	if x != nil {
		return x.PluginVersion
	}
	return ""
}

type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateTimeFormat string `protobuf:"bytes,1,opt,name=DateTimeFormat,proto3" json:"DateTimeFormat,omitempty"`
	TimeZone       string `protobuf:"bytes,2,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{7}
}

func (x *Settings) GetDateTimeFormat() string {
	if x != nil {
		return x.DateTimeFormat
	}
	return ""
}

func (x *Settings) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

type AppLogMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   LogLevel `protobuf:"varint,1,opt,name=Level,proto3,enum=FTaxesGrpc.LogLevel" json:"Level,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Tags    []string `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *AppLogMsg) Reset() {
	*x = AppLogMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppLogMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppLogMsg) ProtoMessage() {}

func (x *AppLogMsg) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppLogMsg.ProtoReflect.Descriptor instead.
func (*AppLogMsg) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{8}
}

func (x *AppLogMsg) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_INFO
}

func (x *AppLogMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AppLogMsg) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TxUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Since,proto3" json:"Since,omitempty"`
}

func (x *TxUpdate) Reset() {
	*x = TxUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxUpdate) ProtoMessage() {}

func (x *TxUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxUpdate.ProtoReflect.Descriptor instead.
func (*TxUpdate) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{9}
}

func (x *TxUpdate) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

type TradeConversionJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trade          *Trade `protobuf:"bytes,1,opt,name=Trade,proto3" json:"Trade,omitempty"`
	TargetCurrency string `protobuf:"bytes,2,opt,name=TargetCurrency,proto3" json:"TargetCurrency,omitempty"`
}

func (x *TradeConversionJob) Reset() {
	*x = TradeConversionJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeConversionJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeConversionJob) ProtoMessage() {}

func (x *TradeConversionJob) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeConversionJob.ProtoReflect.Descriptor instead.
func (*TradeConversionJob) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{10}
}

func (x *TradeConversionJob) GetTrade() *Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

func (x *TradeConversionJob) GetTargetCurrency() string {
	if x != nil {
		return x.TargetCurrency
	}
	return ""
}

type TransferConversionJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfer       *Transfer `protobuf:"bytes,1,opt,name=Transfer,proto3" json:"Transfer,omitempty"`
	TargetCurrency string    `protobuf:"bytes,2,opt,name=TargetCurrency,proto3" json:"TargetCurrency,omitempty"`
}

func (x *TransferConversionJob) Reset() {
	*x = TransferConversionJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferConversionJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferConversionJob) ProtoMessage() {}

func (x *TransferConversionJob) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferConversionJob.ProtoReflect.Descriptor instead.
func (*TransferConversionJob) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{11}
}

func (x *TransferConversionJob) GetTransfer() *Transfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *TransferConversionJob) GetTargetCurrency() string {
	if x != nil {
		return x.TargetCurrency
	}
	return ""
}

type PluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Version      string `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	HasCtlServer bool   `protobuf:"varint,3,opt,name=HasCtlServer,proto3" json:"HasCtlServer,omitempty"`
}

func (x *PluginInfo) Reset() {
	*x = PluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_f_taxes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfo) ProtoMessage() {}

func (x *PluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_f_taxes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfo.ProtoReflect.Descriptor instead.
func (*PluginInfo) Descriptor() ([]byte, []int) {
	return file_f_taxes_proto_rawDescGZIP(), []int{12}
}

func (x *PluginInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PluginInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginInfo) GetHasCtlServer() bool {
	if x != nil {
		return x.HasCtlServer
	}
	return false
}

var File_f_taxes_proto protoreflect.FileDescriptor

var file_f_taxes_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x2d, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x49, 0x73, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x9e,
	0x0a, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x54,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x15,
	0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0xea,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x18, 0xd1, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x12, 0x21, 0x0a, 0x0b,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x18, 0xd2, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x12,
	0x2b, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x35, 0x0a, 0x15,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0xd4, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd5, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xd6, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x18, 0xd7, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x12, 0x2d, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd8, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x78, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0xd9, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0xda, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x11, 0x0a, 0x03,
	0x46, 0x65, 0x65, 0x18, 0xb8, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x65, 0x65, 0x12,
	0x13, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x43, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x46, 0x65, 0x65, 0x43, 0x12, 0x27, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0xba, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46,
	0x65, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a,
	0x0b, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xbb, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1d, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x18, 0xbc, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x65, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x12,
	0x1b, 0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x65, 0x65, 0x18, 0x9c, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x65, 0x65, 0x43, 0x18, 0x9d, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x65, 0x65, 0x43, 0x12, 0x31, 0x0a, 0x13, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x9e, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x46, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2b,
	0x0a, 0x10, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x9f, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x46, 0x65, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x18, 0xa0, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x65, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x12, 0x25, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x80, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x81, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x82, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x10, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x83, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x65, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0xa0, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x70,
	0x73, 0x12, 0x17, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0xa8, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa9, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xaa, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0xab, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xb1, 0x05, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x04,
	0x54, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x02, 0x54, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd0, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18,
	0xb8, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x65, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x46,
	0x65, 0x65, 0x43, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x65, 0x65, 0x43,
	0x12, 0x27, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0xba, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x65, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x65, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xbb, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x09,
	0x46, 0x65, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x18, 0xbc, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x46, 0x65, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x12, 0x25, 0x0a, 0x0d, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0xa1, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0xa2, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18,
	0xa8, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x25,
	0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0xa9, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0xaa, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xab, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0xe7, 0x02, 0x0a, 0x0d, 0x53, 0x72, 0x63, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x02, 0x54, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x46, 0x65, 0x65,
	0x18, 0xb8, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xb9, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x17, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0xa8, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa9, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xaa, 0x46, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0xab, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x67, 0x0a,
	0x0b, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x63, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x27, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x54,
	0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x10,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4a, 0x6f, 0x62,
	0x12, 0x2e, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x2a, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x65, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x22, 0x3c, 0x0a, 0x08, 0x54, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x22,
	0x65, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x27, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x71, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12,
	0x30, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x5a, 0x0a, 0x0a, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x43, 0x74, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x48, 0x61, 0x73, 0x43, 0x74, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2a, 0x1d, 0x0a, 0x08, 0x54, 0x78, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45,
	0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x2d, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41,
	0x4c, 0x10, 0x01, 0x2a, 0x21, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x41, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x27, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x57, 0x41, 0x52, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x52, 0x52, 0x10, 0x02, 0x32,
	0x8b, 0x04, 0x0a, 0x06, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x11, 0x2e, 0x46, 0x54, 0x61, 0x78,
	0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x65, 0x65, 0x12, 0x19, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65,
	0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x72, 0x63, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x46, 0x65, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x53,
	0x68, 0x6f, 0x77, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17,
	0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x06,
	0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x15, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x4a, 0x6f, 0x62, 0x1a, 0x12, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x0f, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x16, 0x2e,
	0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xaa, 0x01,
	0x0a, 0x09, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x74, 0x6c, 0x12, 0x49, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4a, 0x6f, 0x62, 0x1a, 0x11, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x21, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x1a, 0x14, 0x2e, 0x46, 0x54, 0x61, 0x78, 0x65, 0x73, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x2d, 0x74, 0x61, 0x78, 0x65, 0x73,
	0x2f, 0x66, 0x2d, 0x74, 0x61, 0x78, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_f_taxes_proto_rawDescOnce sync.Once
	file_f_taxes_proto_rawDescData = file_f_taxes_proto_rawDesc
)

func file_f_taxes_proto_rawDescGZIP() []byte {
	file_f_taxes_proto_rawDescOnce.Do(func() {
		file_f_taxes_proto_rawDescData = protoimpl.X.CompressGZIP(file_f_taxes_proto_rawDescData)
	})
	return file_f_taxes_proto_rawDescData
}

var file_f_taxes_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_f_taxes_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_f_taxes_proto_goTypes = []any{
	(TxAction)(0),                 // 0: FTaxesGrpc.TxAction
	(TransferAction)(0),           // 1: FTaxesGrpc.TransferAction
	(OrderType)(0),                // 2: FTaxesGrpc.OrderType
	(LogLevel)(0),                 // 3: FTaxesGrpc.LogLevel
	(*TradeProps)(nil),            // 4: FTaxesGrpc.TradeProps
	(*Trade)(nil),                 // 5: FTaxesGrpc.Trade
	(*Transfer)(nil),              // 6: FTaxesGrpc.Transfer
	(*SrcGenericFee)(nil),         // 7: FTaxesGrpc.SrcGenericFee
	(*JobProgress)(nil),           // 8: FTaxesGrpc.JobProgress
	(*Record)(nil),                // 9: FTaxesGrpc.Record
	(*StreamRecordsJob)(nil),      // 10: FTaxesGrpc.StreamRecordsJob
	(*Settings)(nil),              // 11: FTaxesGrpc.Settings
	(*AppLogMsg)(nil),             // 12: FTaxesGrpc.AppLogMsg
	(*TxUpdate)(nil),              // 13: FTaxesGrpc.TxUpdate
	(*TradeConversionJob)(nil),    // 14: FTaxesGrpc.TradeConversionJob
	(*TransferConversionJob)(nil), // 15: FTaxesGrpc.TransferConversionJob
	(*PluginInfo)(nil),            // 16: FTaxesGrpc.PluginInfo
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 18: google.protobuf.Empty
}
var file_f_taxes_proto_depIdxs = []int32{
	17, // 0: FTaxesGrpc.Trade.Ts:type_name -> google.protobuf.Timestamp
	0,  // 1: FTaxesGrpc.Trade.Action:type_name -> FTaxesGrpc.TxAction
	2,  // 2: FTaxesGrpc.Trade.OrderType:type_name -> FTaxesGrpc.OrderType
	4,  // 3: FTaxesGrpc.Trade.Props:type_name -> FTaxesGrpc.TradeProps
	17, // 4: FTaxesGrpc.Trade.Created:type_name -> google.protobuf.Timestamp
	17, // 5: FTaxesGrpc.Trade.Updated:type_name -> google.protobuf.Timestamp
	17, // 6: FTaxesGrpc.Transfer.Ts:type_name -> google.protobuf.Timestamp
	1,  // 7: FTaxesGrpc.Transfer.Action:type_name -> FTaxesGrpc.TransferAction
	17, // 8: FTaxesGrpc.Transfer.Created:type_name -> google.protobuf.Timestamp
	17, // 9: FTaxesGrpc.Transfer.Updated:type_name -> google.protobuf.Timestamp
	17, // 10: FTaxesGrpc.SrcGenericFee.Ts:type_name -> google.protobuf.Timestamp
	17, // 11: FTaxesGrpc.SrcGenericFee.Created:type_name -> google.protobuf.Timestamp
	17, // 12: FTaxesGrpc.SrcGenericFee.Updated:type_name -> google.protobuf.Timestamp
	5,  // 13: FTaxesGrpc.Record.Trade:type_name -> FTaxesGrpc.Trade
	6,  // 14: FTaxesGrpc.Record.Transfer:type_name -> FTaxesGrpc.Transfer
	17, // 15: FTaxesGrpc.StreamRecordsJob.From:type_name -> google.protobuf.Timestamp
	17, // 16: FTaxesGrpc.StreamRecordsJob.To:type_name -> google.protobuf.Timestamp
	3,  // 17: FTaxesGrpc.AppLogMsg.Level:type_name -> FTaxesGrpc.LogLevel
	17, // 18: FTaxesGrpc.TxUpdate.Since:type_name -> google.protobuf.Timestamp
	5,  // 19: FTaxesGrpc.TradeConversionJob.Trade:type_name -> FTaxesGrpc.Trade
	6,  // 20: FTaxesGrpc.TransferConversionJob.Transfer:type_name -> FTaxesGrpc.Transfer
	5,  // 21: FTaxesGrpc.FTaxes.SubmitTrade:input_type -> FTaxesGrpc.Trade
	6,  // 22: FTaxesGrpc.FTaxes.SubmitTransfer:input_type -> FTaxesGrpc.Transfer
	7,  // 23: FTaxesGrpc.FTaxes.SubmitGenericFee:input_type -> FTaxesGrpc.SrcGenericFee
	8,  // 24: FTaxesGrpc.FTaxes.ShowJobProgress:input_type -> FTaxesGrpc.JobProgress
	18, // 25: FTaxesGrpc.FTaxes.GetSettings:input_type -> google.protobuf.Empty
	12, // 26: FTaxesGrpc.FTaxes.AppLog:input_type -> FTaxesGrpc.AppLogMsg
	10, // 27: FTaxesGrpc.FTaxes.StreamRecords:input_type -> FTaxesGrpc.StreamRecordsJob
	16, // 28: FTaxesGrpc.FTaxes.PluginHeartbeat:input_type -> FTaxesGrpc.PluginInfo
	14, // 29: FTaxesGrpc.PluginCtl.ConvertPricesInTrade:input_type -> FTaxesGrpc.TradeConversionJob
	15, // 30: FTaxesGrpc.PluginCtl.ConvertPricesInTransfer:input_type -> FTaxesGrpc.TransferConversionJob
	18, // 31: FTaxesGrpc.FTaxes.SubmitTrade:output_type -> google.protobuf.Empty
	18, // 32: FTaxesGrpc.FTaxes.SubmitTransfer:output_type -> google.protobuf.Empty
	18, // 33: FTaxesGrpc.FTaxes.SubmitGenericFee:output_type -> google.protobuf.Empty
	18, // 34: FTaxesGrpc.FTaxes.ShowJobProgress:output_type -> google.protobuf.Empty
	11, // 35: FTaxesGrpc.FTaxes.GetSettings:output_type -> FTaxesGrpc.Settings
	18, // 36: FTaxesGrpc.FTaxes.AppLog:output_type -> google.protobuf.Empty
	9,  // 37: FTaxesGrpc.FTaxes.StreamRecords:output_type -> FTaxesGrpc.Record
	18, // 38: FTaxesGrpc.FTaxes.PluginHeartbeat:output_type -> google.protobuf.Empty
	5,  // 39: FTaxesGrpc.PluginCtl.ConvertPricesInTrade:output_type -> FTaxesGrpc.Trade
	6,  // 40: FTaxesGrpc.PluginCtl.ConvertPricesInTransfer:output_type -> FTaxesGrpc.Transfer
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_f_taxes_proto_init() }
func file_f_taxes_proto_init() {
	if File_f_taxes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_f_taxes_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TradeProps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SrcGenericFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*JobProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*StreamRecordsJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AppLogMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TxUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TradeConversionJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TransferConversionJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_f_taxes_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_f_taxes_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_f_taxes_proto_goTypes,
		DependencyIndexes: file_f_taxes_proto_depIdxs,
		EnumInfos:         file_f_taxes_proto_enumTypes,
		MessageInfos:      file_f_taxes_proto_msgTypes,
	}.Build()
	File_f_taxes_proto = out.File
	file_f_taxes_proto_rawDesc = nil
	file_f_taxes_proto_goTypes = nil
	file_f_taxes_proto_depIdxs = nil
}
